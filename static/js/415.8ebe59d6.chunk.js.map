{"version":3,"file":"static/js/415.8ebe59d6.chunk.js","mappings":"oKAiBA,IAfmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAOG,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAASC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAnD,SACGG,EAAMK,SAFFL,EAAME,GADA,KAStB,C,kHCsBD,UAhCa,WACX,OAA4BI,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAeW,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,gHAE6BC,EAAAA,EAAAA,MAF7B,gBAEWC,EAFX,EAEWA,QAERL,EAAUK,GAJb,gDAMGC,QAAQC,IAAR,MANH,yBAQGL,GAAa,GARhB,2EAAD,EAWD,GAAE,IACED,GAGE,KAKL,4BACE,kCACA,SAAC,IAAD,CAAYZ,OAAQA,MAGzB,C,uKCjCDmB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAS,mCAEFL,EAAa,mCAAG,2GAC3BM,EAD2B,oDAE3BC,EAF2B,gCAIRH,EAAAA,EAAAA,IAAA,UAAaE,EAAb,oBAAkCD,GAAUE,GAJpC,cAIrBC,EAJqB,yBAKpBA,EAAKC,MALe,2CAAH,qDAQbC,EAAiB,mCAAG,WAAOC,EAAOJ,GAAd,uFACZH,EAAAA,EAAAA,IAAA,+BACOC,EADP,iCACsCM,EADtC,+BAEjBJ,GAH6B,cACzBC,EADyB,yBAKxBA,EAAKC,MALmB,2CAAH,wDAQjBG,EAAc,mCAAG,WAAOrB,GAAP,8FAAWsB,EAAX,+BAA4B,GAAIN,EAAhC,gCACTH,EAAAA,EAAAA,IAAA,gBACRb,GADQ,OACHsB,EADG,oBACuBR,EADvB,mBAEjBE,GAH0B,cACtBC,EADsB,yBAKrBA,EAAKC,MALgB,2CAAH,sDAQdK,EAAa,mCAAG,WAAMC,GAAN,uFACRX,EAAAA,EAAAA,IAAA,gBACRW,EADQ,4BACmBV,EADnB,oBADQ,cACrBG,EADqB,yBAIpBA,EAAKC,KAAKO,MAJU,2CAAH,qD","sources":["components/MoviesList/MoviesList.jsx","pages/Home.jsx","services/apiService.js"],"sourcesContent":["import { NavLink, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <NavLink to={`/movies/${movie.id}`} state={{ from: location }}>\n            {movie.title}\n          </NavLink>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n","import { useEffect, useState } from 'react';\nimport { fetchDayTrend } from '../services/apiService';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Loader from 'components/Loader/Loader';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const { results } = await fetchDayTrend();\n\n        setMovies(results); //results деструктуризація із resp.data\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, []);\n  if (!isLoading) {\n    <div>\n      <h1>\n        <Loader />\n      </h1>\n    </div>;\n  }\n  return (\n    <div>\n      <h1>Home</h1>\n      <MoviesList movies={movies} />\n    </div>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst apiKey = '4019d270e5fd1fc6ed3208efae0ca971';\n\nexport const fetchDayTrend = async (\n  endpoints = `trending/movie/day`,\n  options\n) => {\n  const resp = await axios.get(`${endpoints}?api_key=${apiKey}`, options);\n  return resp.data;\n};\n\nexport const fetchMovieByQuery = async (query, options) => {\n  const resp = await axios.get(\n    `search/movie?api_key=${apiKey}&language=en-US&query=${query}&page=1&include_adult=false`,\n    options\n  );\n  return resp.data;\n};\n\nexport const fetchMovieById = async (id, detailEndpoint = '', options) => {\n  const resp = await axios.get(\n    `movie/${id}${detailEndpoint}?api_key=${apiKey}&language=en-US`,\n    options\n  );\n  return resp.data;\n};\n\nexport const fetchCastInfo = async movieId => {\n  const resp = await axios.get(\n    `movie/${movieId}/credits?api_key=${apiKey}&language=en-US`\n  );\n  return resp.data.cast;\n};\n\nexport const fetchReviewsInfo = async movieId => {\n  const resp = await axios.get(\n    `movie/${movieId}/reviews?api_key=${apiKey}&language=en-US`\n  );\n  return resp.data.results;\n};\n"],"names":["movies","location","useLocation","map","movie","to","id","state","from","title","useState","setMovies","isLoading","setIsLoading","useEffect","fetchDayTrend","results","console","log","axios","apiKey","endpoints","options","resp","data","fetchMovieByQuery","query","fetchMovieById","detailEndpoint","fetchCastInfo","movieId","cast"],"sourceRoot":""}